// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneCalendar.Context;

namespace OneCalendar.Migrations
{
    [DbContext(typeof(CalenderContext))]
    partial class CalenderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OneCalendar.Models.CalenderTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TaskCreatedByUserId");

                    b.Property<string>("TaskDescription");

                    b.Property<string>("TaskName");

                    b.HasKey("Id");

                    b.HasIndex("TaskCreatedByUserId");

                    b.ToTable("CalenderTasks");
                });

            modelBuilder.Entity("OneCalendar.Models.EditedByUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalenderTaskId");

                    b.Property<DateTime>("DateOfEdit");

                    b.Property<string>("EditedById");

                    b.HasKey("Id");

                    b.HasIndex("CalenderTaskId");

                    b.HasIndex("EditedById");

                    b.ToTable("EditedByUser");
                });

            modelBuilder.Entity("OneCalendar.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("OneCalendar.Models.CalenderTask", b =>
                {
                    b.HasOne("OneCalendar.Models.User", "TaskCreatedByUser")
                        .WithMany()
                        .HasForeignKey("TaskCreatedByUserId");
                });

            modelBuilder.Entity("OneCalendar.Models.EditedByUser", b =>
                {
                    b.HasOne("OneCalendar.Models.CalenderTask")
                        .WithMany("Edited")
                        .HasForeignKey("CalenderTaskId");

                    b.HasOne("OneCalendar.Models.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById");
                });
#pragma warning restore 612, 618
        }
    }
}
